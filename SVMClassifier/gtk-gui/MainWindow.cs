
// This file has been generated by the GUI designer. Do not modify.

public partial class MainWindow
{
	private global::Gtk.UIManager UIManager;

	private global::Gtk.Action AboutButton;

	private global::Gtk.Action QuitButton;

	private global::Gtk.Action RunButton;

	private global::Gtk.Action PauseButton;

	private global::Gtk.Action ResetButton;

	private global::Gtk.Action AddModelButton;

	private global::Gtk.Action SaveModelButton;

	private global::Gtk.Action ClassifyButton;

	private global::Gtk.Action RemoveModelButton;

	private global::Gtk.Action ClassifyAllButton;

	private global::Gtk.Action ClearModelsButton;

	private global::Gtk.Action PlotButton;

	private global::Gtk.Action SavePlotButton;

	private global::Gtk.Fixed MainLayout;

	private global::Gtk.Toolbar MainToolbar;

	private global::Gtk.Notebook MainNotebook;

	private global::Gtk.Fixed LayoutPageData;

	private global::Gtk.Label LabelTrainingData;

	private global::Gtk.Entry TrainingFilename;

	private global::Gtk.Button OpenTrainingButton;

	private global::Gtk.Button ReloadTrainingButton;

	private global::Gtk.ScrolledWindow TrainingWindow;

	private global::Gtk.TextView TrainingView;

	private global::Gtk.Label LabelTestData;

	private global::Gtk.Entry TestFilename;

	private global::Gtk.Button OpenTestButton;

	private global::Gtk.Button ReloadTestButton;

	private global::Gtk.ScrolledWindow TestWindow;

	private global::Gtk.TextView TestView;

	private global::Gtk.Label LabelDelimiters;

	private global::Gtk.ComboBox DelimiterBox;

	private global::Gtk.Label LabelFeatures;

	private global::Gtk.SpinButton Features;

	private global::Gtk.Label LabelTrainingExamples;

	private global::Gtk.SpinButton Examples;

	private global::Gtk.Label LabelCategories;

	private global::Gtk.SpinButton Categories;

	private global::Gtk.Label LabelTestSamples;

	private global::Gtk.SpinButton Samples;

	private global::Gtk.Label LabelPageData;

	private global::Gtk.Fixed LayoutPageTraining;

	private global::Gtk.Label LabelTrainClassifier;

	private global::Gtk.ProgressBar TrainingProgress;

	private global::Gtk.Toolbar TrainingToolbar;

	private global::Gtk.Label LabelSetup;

	private global::Gtk.SpinButton Category;

	private global::Gtk.Label LabelCategory;

	private global::Gtk.Label LabelKernels;

	private global::Gtk.ComboBox KernelBox;

	private global::Gtk.Label LabelParam1;

	private global::Gtk.SpinButton Parameter1;

	private global::Gtk.Label LabelParam2;

	private global::Gtk.SpinButton Parameter2;

	private global::Gtk.Label LabelModel;

	private global::Gtk.ComboBox ModelBox;

	private global::Gtk.Label LabelRegularization;

	private global::Gtk.SpinButton Regularization;

	private global::Gtk.Label LabelMaxPasses;

	private global::Gtk.SpinButton MaxPasses;

	private global::Gtk.Label LabelTolerance;

	private global::Gtk.SpinButton Tolerance;

	private global::Gtk.Toolbar ModelToolbar;

	private global::Gtk.Label LabelClassification;

	private global::Gtk.ScrolledWindow ClassificationWindow;

	private global::Gtk.TextView ClassificationView;

	private global::Gtk.ComboBox ClassificationModelsBox;

	private global::Gtk.Toolbar ClassificationToolbar;

	private global::Gtk.Label LabelClassificationModel;

	private global::Gtk.CheckButton Normalize;

	private global::Gtk.Label LabelPageTraining;

	private global::Gtk.Fixed LayoutPageModels;

	private global::Gtk.Label LabelNormalization;

	private global::Gtk.ScrolledWindow NormalizationWindow;

	private global::Gtk.TextView NormalizationView;

	private global::Gtk.ComboBox TrainedParametersBox;

	private global::Gtk.Entry ModelFilename;

	private global::Gtk.ScrolledWindow ParametersWindow;

	private global::Gtk.TextView ParametersView;

	private global::Gtk.Label LabelTrainedParameters;

	private global::Gtk.Button SaveTrainedModelButton;

	private global::Gtk.Button OpenTrainedModelButton;

	private global::Gtk.Label LabelTrainedModel;

	private global::Gtk.ComboBox TrainedModelBox;

	private global::Gtk.Entry TrainedModelCategory;

	private global::Gtk.Label LabelTrainedCategory;

	private global::Gtk.Label LabelTrainedKernel;

	private global::Gtk.ComboBox TrainedModelKernel;

	private global::Gtk.Label LabelTrainedRegularization;

	private global::Gtk.Entry TrainedRegularization;

	private global::Gtk.Label LabelTrainedParameter1;

	private global::Gtk.Entry TrainedParameter1;

	private global::Gtk.Label LabelTrainedParameter2;

	private global::Gtk.Entry TrainedParameter2;

	private global::Gtk.Label LabelTrainedPasses;

	private global::Gtk.Entry TrainedPasses;

	private global::Gtk.Label LabelTrainedTolerance;

	private global::Gtk.Entry TrainedTolerance;

	private global::Gtk.Label LabelTrainedModelsFile;

	private global::Gtk.Label LabelPageModels;

	private global::Gtk.Fixed LayoutPagePlot;

	private global::Gtk.Image PlotImage;

	private global::Gtk.Toolbar PlotToolbar;

	private global::Gtk.ComboBox PlotModelBox;

	private global::Gtk.Label LabelPlotModel;

	private global::Gtk.Label LabelFeature1;

	private global::Gtk.SpinButton Feature1;

	private global::Gtk.Label LabelFeature2;

	private global::Gtk.SpinButton Feature2;

	private global::Gtk.Label LabelPlotType;

	private global::Gtk.ComboBox PlotType;

	private global::Gtk.Label LabelPagePlot;

	private global::Gtk.Fixed LayoutPageAbout;

	private global::Gtk.Label LabelAbout;

	private global::Gtk.ScrolledWindow AboutWindow;

	private global::Gtk.TextView AboutView;

	private global::Gtk.Label LabelCredits;

	private global::Gtk.ScrolledWindow CreditsWindow;

	private global::Gtk.TextView CreditsView;

	private global::Gtk.Image SVMClassifierImage;

	private global::Gtk.Label SVMDecisionBoundaryCaption;

	private global::Gtk.Label LabelPageAbout;

	protected virtual void Build()
	{
		global::Stetic.Gui.Initialize(this);
		// Widget MainWindow
		this.UIManager = new global::Gtk.UIManager();
		global::Gtk.ActionGroup w1 = new global::Gtk.ActionGroup("Default");
		this.AboutButton = new global::Gtk.Action("AboutButton", null, global::Mono.Unix.Catalog.GetString("About SVM Classifier"), "gtk-dialog-info");
		w1.Add(this.AboutButton, null);
		this.QuitButton = new global::Gtk.Action("QuitButton", null, global::Mono.Unix.Catalog.GetString("Exit SVM Classifier"), "gtk-quit");
		w1.Add(this.QuitButton, null);
		this.RunButton = new global::Gtk.Action("RunButton", null, global::Mono.Unix.Catalog.GetString("Start/Continue training"), "gtk-media-play");
		w1.Add(this.RunButton, null);
		this.PauseButton = new global::Gtk.Action("PauseButton", null, global::Mono.Unix.Catalog.GetString("Stop/Pause training"), "gtk-media-pause");
		w1.Add(this.PauseButton, null);
		this.ResetButton = new global::Gtk.Action("ResetButton", null, global::Mono.Unix.Catalog.GetString("Restart training"), "gtk-media-previous");
		w1.Add(this.ResetButton, null);
		this.AddModelButton = new global::Gtk.Action("AddModelButton", null, global::Mono.Unix.Catalog.GetString("Add model"), "gtk-add");
		w1.Add(this.AddModelButton, null);
		this.SaveModelButton = new global::Gtk.Action("SaveModelButton", null, global::Mono.Unix.Catalog.GetString("Save model parameters"), "gtk-apply");
		w1.Add(this.SaveModelButton, null);
		this.ClassifyButton = new global::Gtk.Action("ClassifyButton", null, global::Mono.Unix.Catalog.GetString("Classify test data using selected model"), "gtk-media-play");
		w1.Add(this.ClassifyButton, null);
		this.RemoveModelButton = new global::Gtk.Action("RemoveModelButton", null, global::Mono.Unix.Catalog.GetString("Remove model"), "gtk-remove");
		w1.Add(this.RemoveModelButton, null);
		this.ClassifyAllButton = new global::Gtk.Action("ClassifyAllButton", null, global::Mono.Unix.Catalog.GetString("Classify test data using all models"), "gtk-apply");
		w1.Add(this.ClassifyAllButton, null);
		this.ClearModelsButton = new global::Gtk.Action("ClearModelsButton", null, global::Mono.Unix.Catalog.GetString("Remove all models"), "gtk-delete");
		w1.Add(this.ClearModelsButton, null);
		this.PlotButton = new global::Gtk.Action("PlotButton", null, global::Mono.Unix.Catalog.GetString("Plot decision boundary"), "gtk-media-play");
		w1.Add(this.PlotButton, null);
		this.SavePlotButton = new global::Gtk.Action("SavePlotButton", null, global::Mono.Unix.Catalog.GetString("Save current plot"), "gtk-save");
		w1.Add(this.SavePlotButton, null);
		this.UIManager.InsertActionGroup(w1, 0);
		this.AddAccelGroup(this.UIManager.AccelGroup);
		this.WidthRequest = 800;
		this.HeightRequest = 600;
		this.Name = "MainWindow";
		this.Title = global::Mono.Unix.Catalog.GetString("MainWindow");
		this.Icon = global::Gdk.Pixbuf.LoadFromResource("SVMClassifier.svmclassifier.png");
		this.WindowPosition = ((global::Gtk.WindowPosition)(3));
		this.Resizable = false;
		this.DefaultWidth = 800;
		this.DefaultHeight = 600;
		// Container child MainWindow.Gtk.Container+ContainerChild
		this.MainLayout = new global::Gtk.Fixed();
		this.MainLayout.Name = "MainLayout";
		this.MainLayout.HasWindow = false;
		// Container child MainLayout.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString("<ui><toolbar name=\'MainToolbar\'><toolitem name=\'AboutButton\' action=\'AboutButton\'" +
				"/><toolitem name=\'QuitButton\' action=\'QuitButton\'/></toolbar></ui>");
		this.MainToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/MainToolbar")));
		this.MainToolbar.Name = "MainToolbar";
		this.MainToolbar.ShowArrow = false;
		this.MainToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(0));
		this.MainLayout.Add(this.MainToolbar);
		global::Gtk.Fixed.FixedChild w2 = ((global::Gtk.Fixed.FixedChild)(this.MainLayout[this.MainToolbar]));
		w2.X = 20;
		w2.Y = 20;
		// Container child MainLayout.Gtk.Fixed+FixedChild
		this.MainNotebook = new global::Gtk.Notebook();
		this.MainNotebook.WidthRequest = 740;
		this.MainNotebook.HeightRequest = 510;
		this.MainNotebook.Name = "MainNotebook";
		this.MainNotebook.CurrentPage = 0;
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPageData = new global::Gtk.Fixed();
		this.LayoutPageData.Name = "LayoutPageData";
		this.LayoutPageData.HasWindow = false;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelTrainingData = new global::Gtk.Label();
		this.LabelTrainingData.Name = "LabelTrainingData";
		this.LabelTrainingData.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Training data</b>");
		this.LabelTrainingData.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelTrainingData);
		global::Gtk.Fixed.FixedChild w3 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelTrainingData]));
		w3.X = 20;
		w3.Y = 20;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.TrainingFilename = new global::Gtk.Entry();
		this.TrainingFilename.WidthRequest = 240;
		this.TrainingFilename.Name = "TrainingFilename";
		this.TrainingFilename.IsEditable = true;
		this.TrainingFilename.InvisibleChar = '•';
		this.LayoutPageData.Add(this.TrainingFilename);
		global::Gtk.Fixed.FixedChild w4 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.TrainingFilename]));
		w4.X = 20;
		w4.Y = 40;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.OpenTrainingButton = new global::Gtk.Button();
		this.OpenTrainingButton.Name = "OpenTrainingButton";
		this.OpenTrainingButton.FocusOnClick = false;
		global::Gtk.Image w5 = new global::Gtk.Image();
		w5.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-open", global::Gtk.IconSize.Menu);
		this.OpenTrainingButton.Image = w5;
		this.LayoutPageData.Add(this.OpenTrainingButton);
		global::Gtk.Fixed.FixedChild w6 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.OpenTrainingButton]));
		w6.X = 270;
		w6.Y = 40;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.ReloadTrainingButton = new global::Gtk.Button();
		this.ReloadTrainingButton.Name = "ReloadTrainingButton";
		this.ReloadTrainingButton.FocusOnClick = false;
		global::Gtk.Image w7 = new global::Gtk.Image();
		w7.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-revert-to-saved", global::Gtk.IconSize.Menu);
		this.ReloadTrainingButton.Image = w7;
		this.LayoutPageData.Add(this.ReloadTrainingButton);
		global::Gtk.Fixed.FixedChild w8 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.ReloadTrainingButton]));
		w8.X = 300;
		w8.Y = 40;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.TrainingWindow = new global::Gtk.ScrolledWindow();
		this.TrainingWindow.WidthRequest = 300;
		this.TrainingWindow.HeightRequest = 140;
		this.TrainingWindow.Name = "TrainingWindow";
		this.TrainingWindow.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child TrainingWindow.Gtk.Container+ContainerChild
		this.TrainingView = new global::Gtk.TextView();
		this.TrainingView.Name = "TrainingView";
		this.TrainingWindow.Add(this.TrainingView);
		this.LayoutPageData.Add(this.TrainingWindow);
		global::Gtk.Fixed.FixedChild w10 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.TrainingWindow]));
		w10.X = 20;
		w10.Y = 80;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelTestData = new global::Gtk.Label();
		this.LabelTestData.Name = "LabelTestData";
		this.LabelTestData.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Test data</b>");
		this.LabelTestData.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelTestData);
		global::Gtk.Fixed.FixedChild w11 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelTestData]));
		w11.X = 20;
		w11.Y = 230;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.TestFilename = new global::Gtk.Entry();
		this.TestFilename.WidthRequest = 240;
		this.TestFilename.Name = "TestFilename";
		this.TestFilename.IsEditable = true;
		this.TestFilename.InvisibleChar = '•';
		this.LayoutPageData.Add(this.TestFilename);
		global::Gtk.Fixed.FixedChild w12 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.TestFilename]));
		w12.X = 20;
		w12.Y = 250;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.OpenTestButton = new global::Gtk.Button();
		this.OpenTestButton.Name = "OpenTestButton";
		this.OpenTestButton.FocusOnClick = false;
		global::Gtk.Image w13 = new global::Gtk.Image();
		w13.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-open", global::Gtk.IconSize.Menu);
		this.OpenTestButton.Image = w13;
		this.LayoutPageData.Add(this.OpenTestButton);
		global::Gtk.Fixed.FixedChild w14 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.OpenTestButton]));
		w14.X = 270;
		w14.Y = 250;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.ReloadTestButton = new global::Gtk.Button();
		this.ReloadTestButton.Name = "ReloadTestButton";
		this.ReloadTestButton.FocusOnClick = false;
		global::Gtk.Image w15 = new global::Gtk.Image();
		w15.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-revert-to-saved", global::Gtk.IconSize.Menu);
		this.ReloadTestButton.Image = w15;
		this.LayoutPageData.Add(this.ReloadTestButton);
		global::Gtk.Fixed.FixedChild w16 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.ReloadTestButton]));
		w16.X = 300;
		w16.Y = 250;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.TestWindow = new global::Gtk.ScrolledWindow();
		this.TestWindow.WidthRequest = 300;
		this.TestWindow.HeightRequest = 140;
		this.TestWindow.Name = "TestWindow";
		this.TestWindow.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child TestWindow.Gtk.Container+ContainerChild
		this.TestView = new global::Gtk.TextView();
		this.TestView.Name = "TestView";
		this.TestWindow.Add(this.TestView);
		this.LayoutPageData.Add(this.TestWindow);
		global::Gtk.Fixed.FixedChild w18 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.TestWindow]));
		w18.X = 20;
		w18.Y = 290;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelDelimiters = new global::Gtk.Label();
		this.LabelDelimiters.Name = "LabelDelimiters";
		this.LabelDelimiters.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Delimiters</b>");
		this.LabelDelimiters.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelDelimiters);
		global::Gtk.Fixed.FixedChild w19 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelDelimiters]));
		w19.X = 350;
		w19.Y = 20;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.DelimiterBox = global::Gtk.ComboBox.NewText();
		this.DelimiterBox.WidthRequest = 240;
		this.DelimiterBox.Name = "DelimiterBox";
		this.LayoutPageData.Add(this.DelimiterBox);
		global::Gtk.Fixed.FixedChild w20 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.DelimiterBox]));
		w20.X = 350;
		w20.Y = 40;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelFeatures = new global::Gtk.Label();
		this.LabelFeatures.Name = "LabelFeatures";
		this.LabelFeatures.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Features</b>");
		this.LabelFeatures.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelFeatures);
		global::Gtk.Fixed.FixedChild w21 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelFeatures]));
		w21.X = 350;
		w21.Y = 80;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.Features = new global::Gtk.SpinButton(0D, 10000D, 1D);
		this.Features.WidthRequest = 240;
		this.Features.Name = "Features";
		this.Features.Adjustment.PageIncrement = 1D;
		this.Features.ClimbRate = 1D;
		this.Features.Numeric = true;
		this.LayoutPageData.Add(this.Features);
		global::Gtk.Fixed.FixedChild w22 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.Features]));
		w22.X = 350;
		w22.Y = 100;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelTrainingExamples = new global::Gtk.Label();
		this.LabelTrainingExamples.Name = "LabelTrainingExamples";
		this.LabelTrainingExamples.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Training examples</b>");
		this.LabelTrainingExamples.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelTrainingExamples);
		global::Gtk.Fixed.FixedChild w23 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelTrainingExamples]));
		w23.X = 350;
		w23.Y = 200;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.Examples = new global::Gtk.SpinButton(0D, 100000D, 1D);
		this.Examples.WidthRequest = 240;
		this.Examples.Name = "Examples";
		this.Examples.Adjustment.PageIncrement = 1D;
		this.Examples.ClimbRate = 1D;
		this.Examples.Numeric = true;
		this.LayoutPageData.Add(this.Examples);
		global::Gtk.Fixed.FixedChild w24 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.Examples]));
		w24.X = 350;
		w24.Y = 220;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelCategories = new global::Gtk.Label();
		this.LabelCategories.Name = "LabelCategories";
		this.LabelCategories.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Categories</b>");
		this.LabelCategories.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelCategories);
		global::Gtk.Fixed.FixedChild w25 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelCategories]));
		w25.X = 350;
		w25.Y = 140;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.Categories = new global::Gtk.SpinButton(1D, 10000D, 1D);
		this.Categories.WidthRequest = 240;
		this.Categories.Name = "Categories";
		this.Categories.Adjustment.PageIncrement = 1D;
		this.Categories.ClimbRate = 1D;
		this.Categories.Numeric = true;
		this.Categories.Value = 1D;
		this.LayoutPageData.Add(this.Categories);
		global::Gtk.Fixed.FixedChild w26 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.Categories]));
		w26.X = 350;
		w26.Y = 160;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelTestSamples = new global::Gtk.Label();
		this.LabelTestSamples.Name = "LabelTestSamples";
		this.LabelTestSamples.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Test samples</b>");
		this.LabelTestSamples.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelTestSamples);
		global::Gtk.Fixed.FixedChild w27 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelTestSamples]));
		w27.X = 350;
		w27.Y = 260;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.Samples = new global::Gtk.SpinButton(0D, 100000D, 1D);
		this.Samples.WidthRequest = 240;
		this.Samples.Name = "Samples";
		this.Samples.Adjustment.PageIncrement = 1D;
		this.Samples.ClimbRate = 1D;
		this.Samples.Numeric = true;
		this.LayoutPageData.Add(this.Samples);
		global::Gtk.Fixed.FixedChild w28 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.Samples]));
		w28.X = 350;
		w28.Y = 280;
		this.MainNotebook.Add(this.LayoutPageData);
		// Notebook tab
		this.LabelPageData = new global::Gtk.Label();
		this.LabelPageData.Name = "LabelPageData";
		this.LabelPageData.LabelProp = global::Mono.Unix.Catalog.GetString("Data");
		this.MainNotebook.SetTabLabel(this.LayoutPageData, this.LabelPageData);
		this.LabelPageData.ShowAll();
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPageTraining = new global::Gtk.Fixed();
		this.LayoutPageTraining.Name = "LayoutPageTraining";
		this.LayoutPageTraining.HasWindow = false;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelTrainClassifier = new global::Gtk.Label();
		this.LabelTrainClassifier.Name = "LabelTrainClassifier";
		this.LabelTrainClassifier.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Train Model(s)</b>");
		this.LabelTrainClassifier.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelTrainClassifier);
		global::Gtk.Fixed.FixedChild w30 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelTrainClassifier]));
		w30.X = 350;
		w30.Y = 40;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.TrainingProgress = new global::Gtk.ProgressBar();
		this.TrainingProgress.WidthRequest = 240;
		this.TrainingProgress.Name = "TrainingProgress";
		this.LayoutPageTraining.Add(this.TrainingProgress);
		global::Gtk.Fixed.FixedChild w31 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.TrainingProgress]));
		w31.X = 350;
		w31.Y = 60;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString("<ui><toolbar name=\'TrainingToolbar\'><toolitem name=\'RunButton\' action=\'RunButton\'" +
				"/><toolitem name=\'PauseButton\' action=\'PauseButton\'/><toolitem name=\'ResetButton" +
				"\' action=\'ResetButton\'/></toolbar></ui>");
		this.TrainingToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/TrainingToolbar")));
		this.TrainingToolbar.Name = "TrainingToolbar";
		this.TrainingToolbar.ShowArrow = false;
		this.TrainingToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(0));
		this.LayoutPageTraining.Add(this.TrainingToolbar);
		global::Gtk.Fixed.FixedChild w32 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.TrainingToolbar]));
		w32.X = 350;
		w32.Y = 90;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelSetup = new global::Gtk.Label();
		this.LabelSetup.Name = "LabelSetup";
		this.LabelSetup.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Setup classifiers</b>");
		this.LabelSetup.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelSetup);
		global::Gtk.Fixed.FixedChild w33 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelSetup]));
		w33.X = 20;
		w33.Y = 10;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Category = new global::Gtk.SpinButton(1D, 10000D, 1D);
		this.Category.WidthRequest = 150;
		this.Category.Name = "Category";
		this.Category.Adjustment.PageIncrement = 1D;
		this.Category.ClimbRate = 1D;
		this.Category.Numeric = true;
		this.Category.Value = 1D;
		this.LayoutPageTraining.Add(this.Category);
		global::Gtk.Fixed.FixedChild w34 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Category]));
		w34.X = 180;
		w34.Y = 60;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelCategory = new global::Gtk.Label();
		this.LabelCategory.Name = "LabelCategory";
		this.LabelCategory.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Category</b>");
		this.LabelCategory.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelCategory);
		global::Gtk.Fixed.FixedChild w35 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelCategory]));
		w35.X = 180;
		w35.Y = 40;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelKernels = new global::Gtk.Label();
		this.LabelKernels.Name = "LabelKernels";
		this.LabelKernels.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Kernel</b>");
		this.LabelKernels.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelKernels);
		global::Gtk.Fixed.FixedChild w36 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelKernels]));
		w36.X = 20;
		w36.Y = 90;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.KernelBox = global::Gtk.ComboBox.NewText();
		this.KernelBox.WidthRequest = 150;
		this.KernelBox.Name = "KernelBox";
		this.LayoutPageTraining.Add(this.KernelBox);
		global::Gtk.Fixed.FixedChild w37 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.KernelBox]));
		w37.X = 20;
		w37.Y = 110;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelParam1 = new global::Gtk.Label();
		this.LabelParam1.Name = "LabelParam1";
		this.LabelParam1.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Parameter 1</b>");
		this.LabelParam1.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelParam1);
		global::Gtk.Fixed.FixedChild w38 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelParam1]));
		w38.X = 20;
		w38.Y = 150;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Parameter1 = new global::Gtk.SpinButton(0D, 1000D, 1E-05D);
		this.Parameter1.WidthRequest = 150;
		this.Parameter1.Name = "Parameter1";
		this.Parameter1.Adjustment.PageIncrement = 1D;
		this.Parameter1.ClimbRate = 1D;
		this.Parameter1.Digits = ((uint)(5));
		this.Parameter1.Numeric = true;
		this.LayoutPageTraining.Add(this.Parameter1);
		global::Gtk.Fixed.FixedChild w39 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Parameter1]));
		w39.X = 20;
		w39.Y = 170;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelParam2 = new global::Gtk.Label();
		this.LabelParam2.Name = "LabelParam2";
		this.LabelParam2.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Parameter 2</b>");
		this.LabelParam2.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelParam2);
		global::Gtk.Fixed.FixedChild w40 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelParam2]));
		w40.X = 20;
		w40.Y = 200;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Parameter2 = new global::Gtk.SpinButton(0D, 1000D, 1E-05D);
		this.Parameter2.WidthRequest = 150;
		this.Parameter2.Name = "Parameter2";
		this.Parameter2.Adjustment.PageIncrement = 1D;
		this.Parameter2.ClimbRate = 1D;
		this.Parameter2.Digits = ((uint)(5));
		this.Parameter2.Numeric = true;
		this.LayoutPageTraining.Add(this.Parameter2);
		global::Gtk.Fixed.FixedChild w41 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Parameter2]));
		w41.X = 20;
		w41.Y = 220;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelModel = new global::Gtk.Label();
		this.LabelModel.Name = "LabelModel";
		this.LabelModel.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Model</b>");
		this.LabelModel.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelModel);
		global::Gtk.Fixed.FixedChild w42 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelModel]));
		w42.X = 20;
		w42.Y = 40;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.ModelBox = global::Gtk.ComboBox.NewText();
		this.ModelBox.WidthRequest = 150;
		this.ModelBox.Name = "ModelBox";
		this.LayoutPageTraining.Add(this.ModelBox);
		global::Gtk.Fixed.FixedChild w43 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.ModelBox]));
		w43.X = 20;
		w43.Y = 60;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelRegularization = new global::Gtk.Label();
		this.LabelRegularization.Name = "LabelRegularization";
		this.LabelRegularization.LabelProp = global::Mono.Unix.Catalog.GetString("<b>SVM Regularization</b>");
		this.LabelRegularization.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelRegularization);
		global::Gtk.Fixed.FixedChild w44 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelRegularization]));
		w44.X = 183;
		w44.Y = 92;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Regularization = new global::Gtk.SpinButton(0D, 10000D, 1E-05D);
		this.Regularization.WidthRequest = 150;
		this.Regularization.Name = "Regularization";
		this.Regularization.Adjustment.PageIncrement = 1D;
		this.Regularization.ClimbRate = 1D;
		this.Regularization.Digits = ((uint)(5));
		this.Regularization.Numeric = true;
		this.Regularization.Value = 1D;
		this.LayoutPageTraining.Add(this.Regularization);
		global::Gtk.Fixed.FixedChild w45 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Regularization]));
		w45.X = 180;
		w45.Y = 110;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelMaxPasses = new global::Gtk.Label();
		this.LabelMaxPasses.Name = "LabelMaxPasses";
		this.LabelMaxPasses.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Maximum # of Passes</b>");
		this.LabelMaxPasses.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelMaxPasses);
		global::Gtk.Fixed.FixedChild w46 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelMaxPasses]));
		w46.X = 180;
		w46.Y = 150;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.MaxPasses = new global::Gtk.SpinButton(1D, 100D, 1D);
		this.MaxPasses.WidthRequest = 150;
		this.MaxPasses.Name = "MaxPasses";
		this.MaxPasses.Adjustment.PageIncrement = 1D;
		this.MaxPasses.ClimbRate = 1D;
		this.MaxPasses.Numeric = true;
		this.MaxPasses.Value = 5D;
		this.LayoutPageTraining.Add(this.MaxPasses);
		global::Gtk.Fixed.FixedChild w47 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.MaxPasses]));
		w47.X = 180;
		w47.Y = 170;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelTolerance = new global::Gtk.Label();
		this.LabelTolerance.Name = "LabelTolerance";
		this.LabelTolerance.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Tolerance</b>");
		this.LabelTolerance.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelTolerance);
		global::Gtk.Fixed.FixedChild w48 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelTolerance]));
		w48.X = 180;
		w48.Y = 200;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Tolerance = new global::Gtk.SpinButton(0D, 100D, 1E-05D);
		this.Tolerance.WidthRequest = 150;
		this.Tolerance.Name = "Tolerance";
		this.Tolerance.Adjustment.PageIncrement = 1D;
		this.Tolerance.ClimbRate = 1D;
		this.Tolerance.Digits = ((uint)(5));
		this.Tolerance.Numeric = true;
		this.Tolerance.Value = 1E-05D;
		this.LayoutPageTraining.Add(this.Tolerance);
		global::Gtk.Fixed.FixedChild w49 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Tolerance]));
		w49.X = 180;
		w49.Y = 220;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString(@"<ui><toolbar name='ModelToolbar'><toolitem name='AddModelButton' action='AddModelButton'/><toolitem name='RemoveModelButton' action='RemoveModelButton'/><toolitem name='SaveModelButton' action='SaveModelButton'/><toolitem name='ClearModelsButton' action='ClearModelsButton'/></toolbar></ui>");
		this.ModelToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/ModelToolbar")));
		this.ModelToolbar.Name = "ModelToolbar";
		this.ModelToolbar.ShowArrow = false;
		this.ModelToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(0));
		this.LayoutPageTraining.Add(this.ModelToolbar);
		global::Gtk.Fixed.FixedChild w50 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.ModelToolbar]));
		w50.X = 180;
		w50.Y = 260;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelClassification = new global::Gtk.Label();
		this.LabelClassification.Name = "LabelClassification";
		this.LabelClassification.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Classification</b>");
		this.LabelClassification.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelClassification);
		global::Gtk.Fixed.FixedChild w51 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelClassification]));
		w51.X = 350;
		w51.Y = 300;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.ClassificationWindow = new global::Gtk.ScrolledWindow();
		this.ClassificationWindow.WidthRequest = 300;
		this.ClassificationWindow.HeightRequest = 140;
		this.ClassificationWindow.Name = "ClassificationWindow";
		this.ClassificationWindow.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child ClassificationWindow.Gtk.Container+ContainerChild
		this.ClassificationView = new global::Gtk.TextView();
		this.ClassificationView.CanFocus = true;
		this.ClassificationView.Name = "ClassificationView";
		this.ClassificationView.Editable = false;
		this.ClassificationWindow.Add(this.ClassificationView);
		this.LayoutPageTraining.Add(this.ClassificationWindow);
		global::Gtk.Fixed.FixedChild w53 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.ClassificationWindow]));
		w53.X = 350;
		w53.Y = 320;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.ClassificationModelsBox = global::Gtk.ComboBox.NewText();
		this.ClassificationModelsBox.WidthRequest = 150;
		this.ClassificationModelsBox.Name = "ClassificationModelsBox";
		this.LayoutPageTraining.Add(this.ClassificationModelsBox);
		global::Gtk.Fixed.FixedChild w54 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.ClassificationModelsBox]));
		w54.X = 350;
		w54.Y = 260;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString("<ui><toolbar name=\'ClassificationToolbar\'><toolitem name=\'ClassifyButton\' action=" +
				"\'ClassifyButton\'/><toolitem name=\'ClassifyAllButton\' action=\'ClassifyAllButton\'/" +
				"></toolbar></ui>");
		this.ClassificationToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/ClassificationToolbar")));
		this.ClassificationToolbar.Name = "ClassificationToolbar";
		this.ClassificationToolbar.ShowArrow = false;
		this.ClassificationToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(0));
		this.LayoutPageTraining.Add(this.ClassificationToolbar);
		global::Gtk.Fixed.FixedChild w55 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.ClassificationToolbar]));
		w55.X = 510;
		w55.Y = 255;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelClassificationModel = new global::Gtk.Label();
		this.LabelClassificationModel.Name = "LabelClassificationModel";
		this.LabelClassificationModel.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Model</b>");
		this.LabelClassificationModel.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelClassificationModel);
		global::Gtk.Fixed.FixedChild w56 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelClassificationModel]));
		w56.X = 350;
		w56.Y = 240;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Normalize = new global::Gtk.CheckButton();
		this.Normalize.Name = "Normalize";
		this.Normalize.Label = global::Mono.Unix.Catalog.GetString("Normalize Data");
		this.Normalize.DrawIndicator = true;
		this.Normalize.UseUnderline = true;
		this.Normalize.FocusOnClick = false;
		this.LayoutPageTraining.Add(this.Normalize);
		global::Gtk.Fixed.FixedChild w57 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Normalize]));
		w57.X = 350;
		w57.Y = 140;
		this.MainNotebook.Add(this.LayoutPageTraining);
		global::Gtk.Notebook.NotebookChild w58 = ((global::Gtk.Notebook.NotebookChild)(this.MainNotebook[this.LayoutPageTraining]));
		w58.Position = 1;
		// Notebook tab
		this.LabelPageTraining = new global::Gtk.Label();
		this.LabelPageTraining.Name = "LabelPageTraining";
		this.LabelPageTraining.LabelProp = global::Mono.Unix.Catalog.GetString("Training");
		this.MainNotebook.SetTabLabel(this.LayoutPageTraining, this.LabelPageTraining);
		this.LabelPageTraining.ShowAll();
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPageModels = new global::Gtk.Fixed();
		this.LayoutPageModels.Name = "LayoutPageModels";
		this.LayoutPageModels.HasWindow = false;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelNormalization = new global::Gtk.Label();
		this.LabelNormalization.Name = "LabelNormalization";
		this.LabelNormalization.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Normalization</b>");
		this.LabelNormalization.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelNormalization);
		global::Gtk.Fixed.FixedChild w59 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelNormalization]));
		w59.X = 350;
		w59.Y = 270;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.NormalizationWindow = new global::Gtk.ScrolledWindow();
		this.NormalizationWindow.WidthRequest = 300;
		this.NormalizationWindow.HeightRequest = 140;
		this.NormalizationWindow.Name = "NormalizationWindow";
		this.NormalizationWindow.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child NormalizationWindow.Gtk.Container+ContainerChild
		this.NormalizationView = new global::Gtk.TextView();
		this.NormalizationView.Name = "NormalizationView";
		this.NormalizationView.Editable = false;
		this.NormalizationWindow.Add(this.NormalizationView);
		this.LayoutPageModels.Add(this.NormalizationWindow);
		global::Gtk.Fixed.FixedChild w61 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.NormalizationWindow]));
		w61.X = 350;
		w61.Y = 290;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.TrainedParametersBox = global::Gtk.ComboBox.NewText();
		this.TrainedParametersBox.WidthRequest = 300;
		this.TrainedParametersBox.Name = "TrainedParametersBox";
		this.LayoutPageModels.Add(this.TrainedParametersBox);
		global::Gtk.Fixed.FixedChild w62 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.TrainedParametersBox]));
		w62.X = 350;
		w62.Y = 40;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.ModelFilename = new global::Gtk.Entry();
		this.ModelFilename.WidthRequest = 240;
		this.ModelFilename.Name = "ModelFilename";
		this.ModelFilename.IsEditable = true;
		this.ModelFilename.InvisibleChar = '•';
		this.LayoutPageModels.Add(this.ModelFilename);
		global::Gtk.Fixed.FixedChild w63 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.ModelFilename]));
		w63.X = 20;
		w63.Y = 290;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.ParametersWindow = new global::Gtk.ScrolledWindow();
		this.ParametersWindow.WidthRequest = 300;
		this.ParametersWindow.HeightRequest = 140;
		this.ParametersWindow.Name = "ParametersWindow";
		this.ParametersWindow.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child ParametersWindow.Gtk.Container+ContainerChild
		this.ParametersView = new global::Gtk.TextView();
		this.ParametersView.CanFocus = true;
		this.ParametersView.Name = "ParametersView";
		this.ParametersView.Editable = false;
		this.ParametersWindow.Add(this.ParametersView);
		this.LayoutPageModels.Add(this.ParametersWindow);
		global::Gtk.Fixed.FixedChild w65 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.ParametersWindow]));
		w65.X = 350;
		w65.Y = 80;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedParameters = new global::Gtk.Label();
		this.LabelTrainedParameters.Name = "LabelTrainedParameters";
		this.LabelTrainedParameters.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Model Parameters</b>");
		this.LabelTrainedParameters.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedParameters);
		global::Gtk.Fixed.FixedChild w66 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedParameters]));
		w66.X = 350;
		w66.Y = 20;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.SaveTrainedModelButton = new global::Gtk.Button();
		this.SaveTrainedModelButton.Name = "SaveTrainedModelButton";
		this.SaveTrainedModelButton.FocusOnClick = false;
		global::Gtk.Image w67 = new global::Gtk.Image();
		w67.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-save", global::Gtk.IconSize.Menu);
		this.SaveTrainedModelButton.Image = w67;
		this.LayoutPageModels.Add(this.SaveTrainedModelButton);
		global::Gtk.Fixed.FixedChild w68 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.SaveTrainedModelButton]));
		w68.X = 270;
		w68.Y = 290;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.OpenTrainedModelButton = new global::Gtk.Button();
		this.OpenTrainedModelButton.Name = "OpenTrainedModelButton";
		this.OpenTrainedModelButton.FocusOnClick = false;
		global::Gtk.Image w69 = new global::Gtk.Image();
		w69.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-open", global::Gtk.IconSize.Menu);
		this.OpenTrainedModelButton.Image = w69;
		this.LayoutPageModels.Add(this.OpenTrainedModelButton);
		global::Gtk.Fixed.FixedChild w70 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.OpenTrainedModelButton]));
		w70.X = 300;
		w70.Y = 290;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedModel = new global::Gtk.Label();
		this.LabelTrainedModel.Name = "LabelTrainedModel";
		this.LabelTrainedModel.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Model</b>");
		this.LabelTrainedModel.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedModel);
		global::Gtk.Fixed.FixedChild w71 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedModel]));
		w71.X = 20;
		w71.Y = 20;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.TrainedModelBox = global::Gtk.ComboBox.NewText();
		this.TrainedModelBox.WidthRequest = 150;
		this.TrainedModelBox.Name = "TrainedModelBox";
		this.LayoutPageModels.Add(this.TrainedModelBox);
		global::Gtk.Fixed.FixedChild w72 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.TrainedModelBox]));
		w72.X = 20;
		w72.Y = 40;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.TrainedModelCategory = new global::Gtk.Entry();
		this.TrainedModelCategory.WidthRequest = 150;
		this.TrainedModelCategory.Name = "TrainedModelCategory";
		this.TrainedModelCategory.IsEditable = false;
		this.TrainedModelCategory.InvisibleChar = '•';
		this.LayoutPageModels.Add(this.TrainedModelCategory);
		global::Gtk.Fixed.FixedChild w73 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.TrainedModelCategory]));
		w73.X = 180;
		w73.Y = 40;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedCategory = new global::Gtk.Label();
		this.LabelTrainedCategory.Name = "LabelTrainedCategory";
		this.LabelTrainedCategory.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Category</b>");
		this.LabelTrainedCategory.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedCategory);
		global::Gtk.Fixed.FixedChild w74 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedCategory]));
		w74.X = 180;
		w74.Y = 20;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedKernel = new global::Gtk.Label();
		this.LabelTrainedKernel.Name = "LabelTrainedKernel";
		this.LabelTrainedKernel.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Kernel</b>");
		this.LabelTrainedKernel.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedKernel);
		global::Gtk.Fixed.FixedChild w75 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedKernel]));
		w75.X = 20;
		w75.Y = 80;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.TrainedModelKernel = global::Gtk.ComboBox.NewText();
		this.TrainedModelKernel.WidthRequest = 150;
		this.TrainedModelKernel.Name = "TrainedModelKernel";
		this.LayoutPageModels.Add(this.TrainedModelKernel);
		global::Gtk.Fixed.FixedChild w76 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.TrainedModelKernel]));
		w76.X = 20;
		w76.Y = 100;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedRegularization = new global::Gtk.Label();
		this.LabelTrainedRegularization.Name = "LabelTrainedRegularization";
		this.LabelTrainedRegularization.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Regularization</b>");
		this.LabelTrainedRegularization.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedRegularization);
		global::Gtk.Fixed.FixedChild w77 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedRegularization]));
		w77.X = 180;
		w77.Y = 80;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.TrainedRegularization = new global::Gtk.Entry();
		this.TrainedRegularization.WidthRequest = 150;
		this.TrainedRegularization.Name = "TrainedRegularization";
		this.TrainedRegularization.IsEditable = false;
		this.TrainedRegularization.InvisibleChar = '•';
		this.LayoutPageModels.Add(this.TrainedRegularization);
		global::Gtk.Fixed.FixedChild w78 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.TrainedRegularization]));
		w78.X = 180;
		w78.Y = 100;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedParameter1 = new global::Gtk.Label();
		this.LabelTrainedParameter1.Name = "LabelTrainedParameter1";
		this.LabelTrainedParameter1.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Parameter 1</b>");
		this.LabelTrainedParameter1.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedParameter1);
		global::Gtk.Fixed.FixedChild w79 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedParameter1]));
		w79.X = 20;
		w79.Y = 140;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.TrainedParameter1 = new global::Gtk.Entry();
		this.TrainedParameter1.WidthRequest = 150;
		this.TrainedParameter1.Name = "TrainedParameter1";
		this.TrainedParameter1.IsEditable = false;
		this.TrainedParameter1.InvisibleChar = '•';
		this.LayoutPageModels.Add(this.TrainedParameter1);
		global::Gtk.Fixed.FixedChild w80 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.TrainedParameter1]));
		w80.X = 20;
		w80.Y = 160;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedParameter2 = new global::Gtk.Label();
		this.LabelTrainedParameter2.Name = "LabelTrainedParameter2";
		this.LabelTrainedParameter2.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Parameter 2</b>");
		this.LabelTrainedParameter2.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedParameter2);
		global::Gtk.Fixed.FixedChild w81 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedParameter2]));
		w81.X = 20;
		w81.Y = 200;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.TrainedParameter2 = new global::Gtk.Entry();
		this.TrainedParameter2.WidthRequest = 150;
		this.TrainedParameter2.Name = "TrainedParameter2";
		this.TrainedParameter2.IsEditable = false;
		this.TrainedParameter2.InvisibleChar = '•';
		this.LayoutPageModels.Add(this.TrainedParameter2);
		global::Gtk.Fixed.FixedChild w82 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.TrainedParameter2]));
		w82.X = 20;
		w82.Y = 220;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedPasses = new global::Gtk.Label();
		this.LabelTrainedPasses.Name = "LabelTrainedPasses";
		this.LabelTrainedPasses.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Passes</b>");
		this.LabelTrainedPasses.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedPasses);
		global::Gtk.Fixed.FixedChild w83 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedPasses]));
		w83.X = 180;
		w83.Y = 140;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.TrainedPasses = new global::Gtk.Entry();
		this.TrainedPasses.WidthRequest = 150;
		this.TrainedPasses.CanFocus = true;
		this.TrainedPasses.Name = "TrainedPasses";
		this.TrainedPasses.IsEditable = false;
		this.TrainedPasses.InvisibleChar = '•';
		this.LayoutPageModels.Add(this.TrainedPasses);
		global::Gtk.Fixed.FixedChild w84 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.TrainedPasses]));
		w84.X = 180;
		w84.Y = 160;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedTolerance = new global::Gtk.Label();
		this.LabelTrainedTolerance.Name = "LabelTrainedTolerance";
		this.LabelTrainedTolerance.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Tolerance</b>");
		this.LabelTrainedTolerance.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedTolerance);
		global::Gtk.Fixed.FixedChild w85 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedTolerance]));
		w85.X = 180;
		w85.Y = 200;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.TrainedTolerance = new global::Gtk.Entry();
		this.TrainedTolerance.WidthRequest = 150;
		this.TrainedTolerance.Name = "TrainedTolerance";
		this.TrainedTolerance.IsEditable = false;
		this.TrainedTolerance.InvisibleChar = '•';
		this.LayoutPageModels.Add(this.TrainedTolerance);
		global::Gtk.Fixed.FixedChild w86 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.TrainedTolerance]));
		w86.X = 180;
		w86.Y = 220;
		// Container child LayoutPageModels.Gtk.Fixed+FixedChild
		this.LabelTrainedModelsFile = new global::Gtk.Label();
		this.LabelTrainedModelsFile.Name = "LabelTrainedModelsFile";
		this.LabelTrainedModelsFile.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Trained models</b>");
		this.LabelTrainedModelsFile.UseMarkup = true;
		this.LayoutPageModels.Add(this.LabelTrainedModelsFile);
		global::Gtk.Fixed.FixedChild w87 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageModels[this.LabelTrainedModelsFile]));
		w87.X = 20;
		w87.Y = 270;
		this.MainNotebook.Add(this.LayoutPageModels);
		global::Gtk.Notebook.NotebookChild w88 = ((global::Gtk.Notebook.NotebookChild)(this.MainNotebook[this.LayoutPageModels]));
		w88.Position = 2;
		// Notebook tab
		this.LabelPageModels = new global::Gtk.Label();
		this.LabelPageModels.Name = "LabelPageModels";
		this.LabelPageModels.LabelProp = global::Mono.Unix.Catalog.GetString("Models");
		this.MainNotebook.SetTabLabel(this.LayoutPageModels, this.LabelPageModels);
		this.LabelPageModels.ShowAll();
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPagePlot = new global::Gtk.Fixed();
		this.LayoutPagePlot.Name = "LayoutPagePlot";
		this.LayoutPagePlot.HasWindow = false;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.PlotImage = new global::Gtk.Image();
		this.PlotImage.WidthRequest = 400;
		this.PlotImage.HeightRequest = 400;
		this.PlotImage.Name = "PlotImage";
		this.LayoutPagePlot.Add(this.PlotImage);
		global::Gtk.Fixed.FixedChild w89 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.PlotImage]));
		w89.X = 40;
		w89.Y = 40;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString("<ui><toolbar name=\'PlotToolbar\'><toolitem name=\'PlotButton\' action=\'PlotButton\'/>" +
				"<toolitem name=\'SavePlotButton\' action=\'SavePlotButton\'/></toolbar></ui>");
		this.PlotToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/PlotToolbar")));
		this.PlotToolbar.Name = "PlotToolbar";
		this.PlotToolbar.ShowArrow = false;
		this.PlotToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(0));
		this.LayoutPagePlot.Add(this.PlotToolbar);
		global::Gtk.Fixed.FixedChild w90 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.PlotToolbar]));
		w90.X = 460;
		w90.Y = 200;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.PlotModelBox = global::Gtk.ComboBox.NewText();
		this.PlotModelBox.WidthRequest = 256;
		this.PlotModelBox.Name = "PlotModelBox";
		this.LayoutPagePlot.Add(this.PlotModelBox);
		global::Gtk.Fixed.FixedChild w91 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.PlotModelBox]));
		w91.X = 460;
		w91.Y = 100;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.LabelPlotModel = new global::Gtk.Label();
		this.LabelPlotModel.Name = "LabelPlotModel";
		this.LabelPlotModel.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Select model and features to plot</b>");
		this.LabelPlotModel.UseMarkup = true;
		this.LayoutPagePlot.Add(this.LabelPlotModel);
		global::Gtk.Fixed.FixedChild w92 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.LabelPlotModel]));
		w92.X = 460;
		w92.Y = 80;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.LabelFeature1 = new global::Gtk.Label();
		this.LabelFeature1.Name = "LabelFeature1";
		this.LabelFeature1.LabelProp = global::Mono.Unix.Catalog.GetString("<b>X</b>");
		this.LabelFeature1.UseMarkup = true;
		this.LayoutPagePlot.Add(this.LabelFeature1);
		global::Gtk.Fixed.FixedChild w93 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.LabelFeature1]));
		w93.X = 460;
		w93.Y = 140;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.Feature1 = new global::Gtk.SpinButton(0D, 100D, 1D);
		this.Feature1.WidthRequest = 120;
		this.Feature1.Name = "Feature1";
		this.Feature1.Adjustment.PageIncrement = 10D;
		this.Feature1.ClimbRate = 1D;
		this.Feature1.Numeric = true;
		this.LayoutPagePlot.Add(this.Feature1);
		global::Gtk.Fixed.FixedChild w94 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.Feature1]));
		w94.X = 460;
		w94.Y = 160;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.LabelFeature2 = new global::Gtk.Label();
		this.LabelFeature2.Name = "LabelFeature2";
		this.LabelFeature2.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Y</b>");
		this.LabelFeature2.UseMarkup = true;
		this.LayoutPagePlot.Add(this.LabelFeature2);
		global::Gtk.Fixed.FixedChild w95 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.LabelFeature2]));
		w95.X = 600;
		w95.Y = 140;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.Feature2 = new global::Gtk.SpinButton(0D, 100D, 1D);
		this.Feature2.WidthRequest = 120;
		this.Feature2.Name = "Feature2";
		this.Feature2.Adjustment.PageIncrement = 10D;
		this.Feature2.ClimbRate = 1D;
		this.Feature2.Numeric = true;
		this.Feature2.Value = 1D;
		this.LayoutPagePlot.Add(this.Feature2);
		global::Gtk.Fixed.FixedChild w96 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.Feature2]));
		w96.X = 600;
		w96.Y = 160;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.LabelPlotType = new global::Gtk.Label();
		this.LabelPlotType.Name = "LabelPlotType";
		this.LabelPlotType.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Select plot type</b>");
		this.LabelPlotType.UseMarkup = true;
		this.LayoutPagePlot.Add(this.LabelPlotType);
		global::Gtk.Fixed.FixedChild w97 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.LabelPlotType]));
		w97.X = 460;
		w97.Y = 20;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.PlotType = global::Gtk.ComboBox.NewText();
		this.PlotType.WidthRequest = 256;
		this.PlotType.Name = "PlotType";
		this.LayoutPagePlot.Add(this.PlotType);
		global::Gtk.Fixed.FixedChild w98 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.PlotType]));
		w98.X = 460;
		w98.Y = 40;
		this.MainNotebook.Add(this.LayoutPagePlot);
		global::Gtk.Notebook.NotebookChild w99 = ((global::Gtk.Notebook.NotebookChild)(this.MainNotebook[this.LayoutPagePlot]));
		w99.Position = 3;
		// Notebook tab
		this.LabelPagePlot = new global::Gtk.Label();
		this.LabelPagePlot.Name = "LabelPagePlot";
		this.LabelPagePlot.LabelProp = global::Mono.Unix.Catalog.GetString("Plot");
		this.MainNotebook.SetTabLabel(this.LayoutPagePlot, this.LabelPagePlot);
		this.LabelPagePlot.ShowAll();
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPageAbout = new global::Gtk.Fixed();
		this.LayoutPageAbout.Name = "LayoutPageAbout";
		this.LayoutPageAbout.HasWindow = false;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.LabelAbout = new global::Gtk.Label();
		this.LabelAbout.Name = "LabelAbout";
		this.LabelAbout.LabelProp = global::Mono.Unix.Catalog.GetString("<b>About Support Vector Machine Classifier</b>");
		this.LabelAbout.UseMarkup = true;
		this.LayoutPageAbout.Add(this.LabelAbout);
		global::Gtk.Fixed.FixedChild w100 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.LabelAbout]));
		w100.X = 20;
		w100.Y = 20;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.AboutWindow = new global::Gtk.ScrolledWindow();
		this.AboutWindow.WidthRequest = 300;
		this.AboutWindow.HeightRequest = 200;
		this.AboutWindow.Name = "AboutWindow";
		this.AboutWindow.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child AboutWindow.Gtk.Container+ContainerChild
		this.AboutView = new global::Gtk.TextView();
		this.AboutView.Buffer.Text = global::Mono.Unix.Catalog.GetString(@"SVMClassifier software utilizes support vector machines (SVM) in machine learning tasks such as classification and regression analysis.

SVMs are  a type of supervised learning method in which training examples are used to construct a model for assigning new samples to one category (or ""class"").

SVM learning algorithms attempt to enhance  the distinction between categories by constructing an optimal hyperplane (i.e. decision boundary)  so that samples points are precisely assigned to a specific category. 

SVMClassifier implements a simplified and early version of the SMO algorithm written in Matlab and ported to C#. Better nd more higly optimized SVM packages are available at the following links:

LIBSVM   (http://www.csie.ntu.edu.tw/~cjlin/libsvm/)
SVMLight (http://svmlight.joachims.org/)

Reference:

Wikipedia contributors, ""Support vector machine,"" Wikipedia, The Free Encyclopedia, https://en.wikipedia.org/w/index.php?title=Support_vector_machine&oldid=861427091 (accessed October 3, 2018). ");
		this.AboutView.Name = "AboutView";
		this.AboutView.Editable = false;
		this.AboutView.CursorVisible = false;
		this.AboutView.WrapMode = ((global::Gtk.WrapMode)(2));
		this.AboutWindow.Add(this.AboutView);
		this.LayoutPageAbout.Add(this.AboutWindow);
		global::Gtk.Fixed.FixedChild w102 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.AboutWindow]));
		w102.X = 20;
		w102.Y = 40;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.LabelCredits = new global::Gtk.Label();
		this.LabelCredits.Name = "LabelCredits";
		this.LabelCredits.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Credits</b>");
		this.LabelCredits.UseMarkup = true;
		this.LayoutPageAbout.Add(this.LabelCredits);
		global::Gtk.Fixed.FixedChild w103 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.LabelCredits]));
		w103.X = 20;
		w103.Y = 260;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.CreditsWindow = new global::Gtk.ScrolledWindow();
		this.CreditsWindow.WidthRequest = 300;
		this.CreditsWindow.HeightRequest = 140;
		this.CreditsWindow.Name = "CreditsWindow";
		this.CreditsWindow.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child CreditsWindow.Gtk.Container+ContainerChild
		this.CreditsView = new global::Gtk.TextView();
		this.CreditsView.Buffer.Text = global::Mono.Unix.Catalog.GetString("Icons made by Becris from www.flaticon.com is licensed by Creative Commons BY 3.0" +
				"\n\nSVMClassifier utilizes the free JSON.NET library from https://www.newtonsoft.c" +
				"om/json");
		this.CreditsView.Name = "CreditsView";
		this.CreditsView.Editable = false;
		this.CreditsView.CursorVisible = false;
		this.CreditsView.WrapMode = ((global::Gtk.WrapMode)(2));
		this.CreditsWindow.Add(this.CreditsView);
		this.LayoutPageAbout.Add(this.CreditsWindow);
		global::Gtk.Fixed.FixedChild w105 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.CreditsWindow]));
		w105.X = 20;
		w105.Y = 280;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.SVMClassifierImage = new global::Gtk.Image();
		this.SVMClassifierImage.WidthRequest = 340;
		this.SVMClassifierImage.HeightRequest = 340;
		this.SVMClassifierImage.Name = "SVMClassifierImage";
		this.SVMClassifierImage.Pixbuf = global::Gdk.Pixbuf.LoadFromResource("SVMClassifier.SVMDecisionBoundary.png");
		this.LayoutPageAbout.Add(this.SVMClassifierImage);
		global::Gtk.Fixed.FixedChild w106 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.SVMClassifierImage]));
		w106.X = 360;
		w106.Y = 40;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.SVMDecisionBoundaryCaption = new global::Gtk.Label();
		this.SVMDecisionBoundaryCaption.Name = "SVMDecisionBoundaryCaption";
		this.SVMDecisionBoundaryCaption.LabelProp = global::Mono.Unix.Catalog.GetString("SVM decision boundary");
		this.LayoutPageAbout.Add(this.SVMDecisionBoundaryCaption);
		global::Gtk.Fixed.FixedChild w107 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.SVMDecisionBoundaryCaption]));
		w107.X = 360;
		w107.Y = 390;
		this.MainNotebook.Add(this.LayoutPageAbout);
		global::Gtk.Notebook.NotebookChild w108 = ((global::Gtk.Notebook.NotebookChild)(this.MainNotebook[this.LayoutPageAbout]));
		w108.Position = 4;
		// Notebook tab
		this.LabelPageAbout = new global::Gtk.Label();
		this.LabelPageAbout.Name = "LabelPageAbout";
		this.LabelPageAbout.LabelProp = global::Mono.Unix.Catalog.GetString("About");
		this.MainNotebook.SetTabLabel(this.LayoutPageAbout, this.LabelPageAbout);
		this.LabelPageAbout.ShowAll();
		this.MainLayout.Add(this.MainNotebook);
		global::Gtk.Fixed.FixedChild w109 = ((global::Gtk.Fixed.FixedChild)(this.MainLayout[this.MainNotebook]));
		w109.X = 20;
		w109.Y = 70;
		this.Add(this.MainLayout);
		if ((this.Child != null))
		{
			this.Child.ShowAll();
		}
		this.Show();
		this.DeleteEvent += new global::Gtk.DeleteEventHandler(this.OnDeleteEvent);
		this.AboutButton.Activated += new global::System.EventHandler(this.OnAboutButtonClicked);
		this.QuitButton.Activated += new global::System.EventHandler(this.OnQuitButtonClicked);
		this.RunButton.Activated += new global::System.EventHandler(this.OnRunButtonClicked);
		this.PauseButton.Activated += new global::System.EventHandler(this.OnPauseButtonClicked);
		this.ResetButton.Activated += new global::System.EventHandler(this.OnResetButtonClicked);
		this.AddModelButton.Activated += new global::System.EventHandler(this.OnAddModelButtonClicked);
		this.SaveModelButton.Activated += new global::System.EventHandler(this.OnSaveModelButtonClicked);
		this.ClassifyButton.Activated += new global::System.EventHandler(this.OnClassifyButtonClicked);
		this.RemoveModelButton.Activated += new global::System.EventHandler(this.OnRemoveModelButton);
		this.ClassifyAllButton.Activated += new global::System.EventHandler(this.OnClassifyAllButtonClicked);
		this.ClearModelsButton.Activated += new global::System.EventHandler(this.OnClearModelsButtonClicked);
		this.PlotButton.Activated += new global::System.EventHandler(this.OnPlotButtonClicked);
		this.SavePlotButton.Activated += new global::System.EventHandler(this.OnSavePlotButtonClicked);
		this.MainNotebook.SwitchPage += new global::Gtk.SwitchPageHandler(this.OnMainNotebookSwitchPage);
		this.OpenTrainingButton.Clicked += new global::System.EventHandler(this.OnOpenTrainingButtonClicked);
		this.ReloadTrainingButton.Clicked += new global::System.EventHandler(this.OnReloadTrainingButtonClicked);
		this.OpenTestButton.Clicked += new global::System.EventHandler(this.OnOpenTestButtonClicked);
		this.ReloadTestButton.Clicked += new global::System.EventHandler(this.OnReloadTestButtonClicked);
		this.KernelBox.Changed += new global::System.EventHandler(this.OnKernelBoxChanged);
		this.ModelBox.Changed += new global::System.EventHandler(this.OnModelBoxChanged);
		this.TrainedParametersBox.Changed += new global::System.EventHandler(this.OnTrainedParametersBoxChanged);
		this.SaveTrainedModelButton.Clicked += new global::System.EventHandler(this.OnSaveTrainedModelButton);
		this.OpenTrainedModelButton.Clicked += new global::System.EventHandler(this.OnOpenTrainedModelButtonClicked);
		this.TrainedModelBox.Changed += new global::System.EventHandler(this.OnTrainedModelBoxChanged);
	}
}
